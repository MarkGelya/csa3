# Generated from translator/alg/MyAlg.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,45,288,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,1,0,1,
        0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,
        8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,13,1,13,
        1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,
        1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,
        1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,24,
        1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,
        1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,
        1,30,1,30,1,30,1,30,1,31,1,31,1,31,3,31,195,8,31,1,31,1,31,1,32,
        1,32,5,32,201,8,32,10,32,12,32,204,9,32,1,33,1,33,1,34,1,34,1,34,
        1,34,1,34,1,34,1,34,1,34,1,34,3,34,217,8,34,1,35,1,35,1,36,1,36,
        1,36,1,36,3,36,225,8,36,1,37,4,37,228,8,37,11,37,12,37,229,1,38,
        1,38,1,38,4,38,235,8,38,11,38,12,38,236,1,39,1,39,1,39,4,39,242,
        8,39,11,39,12,39,243,1,40,1,40,1,40,4,40,249,8,40,11,40,12,40,250,
        1,41,1,41,1,41,5,41,256,8,41,10,41,12,41,259,9,41,1,41,1,41,1,42,
        1,42,1,42,1,43,1,43,1,43,1,43,5,43,270,8,43,10,43,12,43,273,9,43,
        1,43,3,43,276,8,43,1,43,1,43,1,43,1,43,1,44,4,44,283,8,44,11,44,
        12,44,284,1,44,1,44,0,0,45,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
        20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,
        31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,
        42,85,43,87,44,89,45,1,0,13,2,0,34,34,92,92,3,0,65,90,95,95,97,122,
        4,0,48,57,65,90,95,95,97,122,1,0,48,57,2,0,111,111,113,113,1,0,48,
        55,2,0,104,104,120,120,2,0,48,57,65,70,1,0,98,98,1,0,48,49,8,0,34,
        34,39,39,92,92,98,98,102,102,110,110,114,114,116,116,2,0,10,10,13,
        13,3,0,9,10,13,13,32,32,302,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
        0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
        17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
        27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,
        37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,
        47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,
        57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,
        67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,
        77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,
        87,1,0,0,0,0,89,1,0,0,0,1,91,1,0,0,0,3,93,1,0,0,0,5,95,1,0,0,0,7,
        97,1,0,0,0,9,99,1,0,0,0,11,101,1,0,0,0,13,103,1,0,0,0,15,105,1,0,
        0,0,17,107,1,0,0,0,19,109,1,0,0,0,21,112,1,0,0,0,23,115,1,0,0,0,
        25,117,1,0,0,0,27,120,1,0,0,0,29,122,1,0,0,0,31,125,1,0,0,0,33,127,
        1,0,0,0,35,129,1,0,0,0,37,133,1,0,0,0,39,139,1,0,0,0,41,144,1,0,
        0,0,43,149,1,0,0,0,45,156,1,0,0,0,47,158,1,0,0,0,49,160,1,0,0,0,
        51,162,1,0,0,0,53,165,1,0,0,0,55,170,1,0,0,0,57,176,1,0,0,0,59,180,
        1,0,0,0,61,185,1,0,0,0,63,191,1,0,0,0,65,198,1,0,0,0,67,205,1,0,
        0,0,69,216,1,0,0,0,71,218,1,0,0,0,73,224,1,0,0,0,75,227,1,0,0,0,
        77,231,1,0,0,0,79,238,1,0,0,0,81,245,1,0,0,0,83,252,1,0,0,0,85,262,
        1,0,0,0,87,265,1,0,0,0,89,282,1,0,0,0,91,92,5,91,0,0,92,2,1,0,0,
        0,93,94,5,93,0,0,94,4,1,0,0,0,95,96,5,59,0,0,96,6,1,0,0,0,97,98,
        5,123,0,0,98,8,1,0,0,0,99,100,5,125,0,0,100,10,1,0,0,0,101,102,5,
        40,0,0,102,12,1,0,0,0,103,104,5,41,0,0,104,14,1,0,0,0,105,106,5,
        44,0,0,106,16,1,0,0,0,107,108,5,61,0,0,108,18,1,0,0,0,109,110,5,
        61,0,0,110,111,5,61,0,0,111,20,1,0,0,0,112,113,5,33,0,0,113,114,
        5,61,0,0,114,22,1,0,0,0,115,116,5,60,0,0,116,24,1,0,0,0,117,118,
        5,60,0,0,118,119,5,61,0,0,119,26,1,0,0,0,120,121,5,62,0,0,121,28,
        1,0,0,0,122,123,5,62,0,0,123,124,5,61,0,0,124,30,1,0,0,0,125,126,
        5,43,0,0,126,32,1,0,0,0,127,128,5,45,0,0,128,34,1,0,0,0,129,130,
        5,105,0,0,130,131,5,110,0,0,131,132,5,116,0,0,132,36,1,0,0,0,133,
        134,5,115,0,0,134,135,5,104,0,0,135,136,5,111,0,0,136,137,5,114,
        0,0,137,138,5,116,0,0,138,38,1,0,0,0,139,140,5,98,0,0,140,141,5,
        121,0,0,141,142,5,116,0,0,142,143,5,101,0,0,143,40,1,0,0,0,144,145,
        5,118,0,0,145,146,5,111,0,0,146,147,5,105,0,0,147,148,5,100,0,0,
        148,42,1,0,0,0,149,150,5,115,0,0,150,151,5,116,0,0,151,152,5,114,
        0,0,152,153,5,105,0,0,153,154,5,110,0,0,154,155,5,103,0,0,155,44,
        1,0,0,0,156,157,5,126,0,0,157,46,1,0,0,0,158,159,5,38,0,0,159,48,
        1,0,0,0,160,161,5,124,0,0,161,50,1,0,0,0,162,163,5,105,0,0,163,164,
        5,102,0,0,164,52,1,0,0,0,165,166,5,101,0,0,166,167,5,108,0,0,167,
        168,5,115,0,0,168,169,5,101,0,0,169,54,1,0,0,0,170,171,5,119,0,0,
        171,172,5,104,0,0,172,173,5,105,0,0,173,174,5,108,0,0,174,175,5,
        101,0,0,175,56,1,0,0,0,176,177,5,102,0,0,177,178,5,111,0,0,178,179,
        5,114,0,0,179,58,1,0,0,0,180,181,5,103,0,0,181,182,5,111,0,0,182,
        183,5,116,0,0,183,184,5,111,0,0,184,60,1,0,0,0,185,186,5,97,0,0,
        186,187,5,114,0,0,187,188,5,114,0,0,188,189,5,97,0,0,189,190,5,121,
        0,0,190,62,1,0,0,0,191,194,5,39,0,0,192,195,3,85,42,0,193,195,8,
        0,0,0,194,192,1,0,0,0,194,193,1,0,0,0,195,196,1,0,0,0,196,197,5,
        39,0,0,197,64,1,0,0,0,198,202,7,1,0,0,199,201,7,2,0,0,200,199,1,
        0,0,0,201,204,1,0,0,0,202,200,1,0,0,0,202,203,1,0,0,0,203,66,1,0,
        0,0,204,202,1,0,0,0,205,206,5,58,0,0,206,68,1,0,0,0,207,208,5,116,
        0,0,208,209,5,114,0,0,209,210,5,117,0,0,210,217,5,101,0,0,211,212,
        5,102,0,0,212,213,5,97,0,0,213,214,5,108,0,0,214,215,5,115,0,0,215,
        217,5,101,0,0,216,207,1,0,0,0,216,211,1,0,0,0,217,70,1,0,0,0,218,
        219,5,42,0,0,219,72,1,0,0,0,220,225,3,75,37,0,221,225,3,79,39,0,
        222,225,3,77,38,0,223,225,3,81,40,0,224,220,1,0,0,0,224,221,1,0,
        0,0,224,222,1,0,0,0,224,223,1,0,0,0,225,74,1,0,0,0,226,228,7,3,0,
        0,227,226,1,0,0,0,228,229,1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,
        0,230,76,1,0,0,0,231,232,5,48,0,0,232,234,7,4,0,0,233,235,7,5,0,
        0,234,233,1,0,0,0,235,236,1,0,0,0,236,234,1,0,0,0,236,237,1,0,0,
        0,237,78,1,0,0,0,238,239,5,48,0,0,239,241,7,6,0,0,240,242,7,7,0,
        0,241,240,1,0,0,0,242,243,1,0,0,0,243,241,1,0,0,0,243,244,1,0,0,
        0,244,80,1,0,0,0,245,246,5,48,0,0,246,248,7,8,0,0,247,249,7,9,0,
        0,248,247,1,0,0,0,249,250,1,0,0,0,250,248,1,0,0,0,250,251,1,0,0,
        0,251,82,1,0,0,0,252,257,5,34,0,0,253,256,3,85,42,0,254,256,8,0,
        0,0,255,253,1,0,0,0,255,254,1,0,0,0,256,259,1,0,0,0,257,255,1,0,
        0,0,257,258,1,0,0,0,258,260,1,0,0,0,259,257,1,0,0,0,260,261,5,34,
        0,0,261,84,1,0,0,0,262,263,5,92,0,0,263,264,7,10,0,0,264,86,1,0,
        0,0,265,266,5,47,0,0,266,267,5,47,0,0,267,271,1,0,0,0,268,270,8,
        11,0,0,269,268,1,0,0,0,270,273,1,0,0,0,271,269,1,0,0,0,271,272,1,
        0,0,0,272,275,1,0,0,0,273,271,1,0,0,0,274,276,5,13,0,0,275,274,1,
        0,0,0,275,276,1,0,0,0,276,277,1,0,0,0,277,278,5,10,0,0,278,279,1,
        0,0,0,279,280,6,43,0,0,280,88,1,0,0,0,281,283,7,12,0,0,282,281,1,
        0,0,0,283,284,1,0,0,0,284,282,1,0,0,0,284,285,1,0,0,0,285,286,1,
        0,0,0,286,287,6,44,0,0,287,90,1,0,0,0,14,0,194,202,216,224,229,236,
        243,250,255,257,271,275,284,1,6,0,0
    ]

class MyAlgLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    ASSIGN = 9
    EQUAL = 10
    NOTEQUAL = 11
    LESS = 12
    LESSEQ = 13
    BIGGER = 14
    BIGGEREQ = 15
    PLUS = 16
    MINUS = 17
    INT = 18
    SHORT = 19
    BYTE = 20
    VOID = 21
    STRING = 22
    NOT = 23
    AND = 24
    OR = 25
    IF = 26
    ELSE = 27
    WHILE = 28
    FOR = 29
    GOTO = 30
    ARRAY = 31
    CHARVAL = 32
    ID = 33
    COLON = 34
    BOOLVAL = 35
    STAR = 36
    INTVAL = 37
    DEC_INTEGER = 38
    OCT_INTEGER = 39
    HEX_INTEGER = 40
    BIN_INTEGER = 41
    STRINGVAL = 42
    ESC_SEQ = 43
    COMMENT = 44
    WHITESPACE = 45

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'['", "']'", "';'", "'{'", "'}'", "'('", "')'", "','", "'='", 
            "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'+'", "'-'", 
            "'int'", "'short'", "'byte'", "'void'", "'string'", "'~'", "'&'", 
            "'|'", "'if'", "'else'", "'while'", "'for'", "'goto'", "'array'", 
            "':'", "'*'" ]

    symbolicNames = [ "<INVALID>",
            "ASSIGN", "EQUAL", "NOTEQUAL", "LESS", "LESSEQ", "BIGGER", "BIGGEREQ", 
            "PLUS", "MINUS", "INT", "SHORT", "BYTE", "VOID", "STRING", "NOT", 
            "AND", "OR", "IF", "ELSE", "WHILE", "FOR", "GOTO", "ARRAY", 
            "CHARVAL", "ID", "COLON", "BOOLVAL", "STAR", "INTVAL", "DEC_INTEGER", 
            "OCT_INTEGER", "HEX_INTEGER", "BIN_INTEGER", "STRINGVAL", "ESC_SEQ", 
            "COMMENT", "WHITESPACE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "ASSIGN", "EQUAL", "NOTEQUAL", "LESS", "LESSEQ", 
                  "BIGGER", "BIGGEREQ", "PLUS", "MINUS", "INT", "SHORT", 
                  "BYTE", "VOID", "STRING", "NOT", "AND", "OR", "IF", "ELSE", 
                  "WHILE", "FOR", "GOTO", "ARRAY", "CHARVAL", "ID", "COLON", 
                  "BOOLVAL", "STAR", "INTVAL", "DEC_INTEGER", "OCT_INTEGER", 
                  "HEX_INTEGER", "BIN_INTEGER", "STRINGVAL", "ESC_SEQ", 
                  "COMMENT", "WHITESPACE" ]

    grammarFileName = "MyAlg.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


